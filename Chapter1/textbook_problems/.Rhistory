dpois(x = 3, lambda = 5)
library(rmarkdown)
rmarkdown()
#what are the probabilities of see 0 to 12 mutations
0:12
#what are the probabilities of see 0 to 12 mutations
dpois(x = 0:12, lambda = 5)
#make a barplot
barplot(dpois(0:12, 5), names.arg = 0:12, col = "red")
#how does R deal with categorical variables
genotype = c("AA","AO","BB","AO","OO","AO","AA","BO","BO",
"AO","BB","AO","BO","AB","OO","AB","BB","AO","AO")
table(genotype)
genotypeF = factor(genotype)
levels(genotypeF)
#get the outcome of 15 coin tosses using Bernoulli model with probability equal to 0.5
rbinom(15, prob = 0.5, size = 1)
#uneven probability fo throwing a ball into right and left box
rbinom(12, prob = 2/3, size = 1)
#uneven probability fo throwing a ball into right and left box
rbinom(12, prob = 2/3, size = 1)
#uneven probability fo throwing a ball into right and left box
rbinom(12, prob = 2/3, size = 1)
#uneven probability fo throwing a ball into right and left box
rbinom(12, prob = 2/3, size = 1)
#uneven probability fo throwing a ball into right and left box
rbinom(12, prob = 2/3, size = 1)
#uneven probability fo throwing a ball into right and left box
rbinom(12, prob = 2/3, size = 1)
#uneven probability fo throwing a ball into right and left box
rbinom(12, prob = 2/3, size = 1)
rbinom(1, prob = 2/3, size = 12)
rbinom(1, prob = 2/3, size = 12)
rbinom(1, prob = 2/3, size = 12)
rbinom(1, prob = 2/3, size = 12)
rbinom(1, prob = 2/3, size = 12)
rbinom(1, prob = 2/3, size = 12)
rbinom(1, prob = 2/3, size = 12)
rbinom(1, prob = 2/3, size = 12)
rbinom(1, prob = 0.3, size = 15)
set.seed(235569515)
rbinom(1, prob = 0.3, size = 15)
rbinom(1, prob = 0.3, size = 15)
rbinom(1, prob = 0.3, size = 15)
rbinom(1, prob = 0.3, size = 15)
rbinom(1, prob = 0.3, size = 15)
rbinom(1, prob = 0.3, size = 15)
rbinom(1, prob = 0.3, size = 15)
rbinom(1, prob = 0.3, size = 15)
#the complete probability mass distribution
probabilities = dbinom(0:15, prob = 0.3, size = 15)
round(probabilities, 2)
#make a bar plot of probabilities
barplot(probabilities, names.arg = 0:15, col = "red")
install.packages("knitr")
library(knitr)
library(rmarkdown)
'''{r}
#what are the probabilities of see 0 to 12 mutations
dpois(x = 0:12, lambda = 5)
'''
set.seed(235569515)
rbinom(50, prob = 0.01, size = 1)
set.seed(235569515)
rbinom(50, prob = 0.01, size = 1)
set.seed(235569515)
rbinom(50, prob = 0.01, size = 1)
set.seed(235569515)
rbinom(50, prob = 0.01, size = 1)
set.seed(235569515)
rbinom(50, prob = 0.01, size = 1)
rbinom(50, prob = 0.01, size = 1)
rbinom(50, prob = 0.01, size = 1)
rbinom(50, prob = 0.01, size = 1)
rbinom(100, prob = 0.01, size = 1)
results <- rbinom(50, prob = 0.01, size = 1)
sum(rbinom(50, prob = 0.01, size = 1))
sum(rbinom(50, prob = 0.01, size = 1))
sum(rbinom(50, prob = 0.01, size = 1))
sum(rbinom(50, prob = 0.01, size = 1))
dpois(x = 50, lambda = 0.01)
dpois(x = 50, lambda = 1)
dpois(x = 50, lambda = 0.5)
dpois(x = 50, lambda = 0.5)
dpois(x = 50, lambda = 0.5)
t.test(sum(rbinom(50, prob = 0.01, size = 1)),dpois(x = 50, lambda = 0.5))
load("../data/e100.RData")
getwd()
getwd()
load("../data/e100.RData")
load("../data/e100.RData")
load(".../data/e100.RData")
load("...\dat\e100.RData")
load(".../data/e100.RData")
load("data/e100.RData")
barplot(e100, ylim = c(0, 7), width = 0.7, xlim = c(-0.5, 100.5),
names.arg = seq(along = e100), col = "darkolivegreen")
maxes = replicate(100000, {
max(rpois(100, 0.5))
})
table(maxes)
pvec = rep(1/4, 4)
t(rmultinom(1, prob = pvec, size = 8))
(rmultinom(1, prob = pvec, size = 8))
#not sure how to do this??
pvec = c(1/8, 3/8, 3/8,1/8)
runif(pvec, min=0, max=1)
runif(pvec, min=0, max=1)
pvec = rep(1/4, 4)
runif(pvec, min=0, max=1)
runif(pvec, min=0, max=1)
runif(10, min=0, max=1)
runif(pvec, 10, min=0, max=1)
runif(pvec, min=0, max=1)
rmultinom(n = 8, prob = pvec, size = 1)
pvec = rep(1/4, 4)
rmultinom(n = 8, prob = pvec, size = 1)
rmultinom(n = 1, prob = pvec, size = 8)
#lets say we have a DNA sequence and all nucleotides are equally likely
pvec=rep(1/4, 4)
#generate 1000 trials
obsunder0 = rmultinom(1000, prob = pvec, size = 20)
rmultinom(1000, prob = pvec, size = 20)
#show first 11 columns
obsunder0[, 1:11]
#therefore for the first column of data we would get
expected0 = pvec * 20
sum((obsunder0[, 1] - expected0)^2 / expected0)
stat = function(obsvd, exptd = 20 * pvec) {
sum((obsvd - exptd)^2 / exptd)
}
stat(obsunder0[, 1])
S0 = apply(obsunder0, 2, stat)
summary(S0)
hist(S0, breaks = 25, col = "lavender", main = "")
q95 = quantile(S0, probs = 0.95)
q95
pvecA = c(3/8, 1/4, 3/12, 1/8)
observed = rmultinom(1000, prob = pvecA, size = 20)
dim(observed)
observed[,1:7]
#see the mean for each nucleotide for all 1000 trials
apply(observed, 1, mean)
#determined what the expected values of A G T C in a 20 nucleotide sequence are
expectedA = pvecA * 20
expectedA
stat(observed[, 1])
S1 = apply(observed, 2, stat)
q95
S1
sum(S1 > q95)
S1 > q95)
S1 > q95
pvecA = c(3/8, 1/4, 3/12, 1/8)
observed = rmultinom(1000, prob = pvecA, size = 100)
dim(observed)
observed[,1:7]
apply(observed, 1, mean)
#determine expected
expectedA = pvecA * 100
expectedA
#determine variability
S1 = apply(observed, 2, stat)
S1
#determine variability
S2 = apply(observed, 2, stat)
#determine variability
S2 = apply(observed, 2, stat)
#calculate how many trials are greater than the critical value
sum(S2 > q95)
#calculate critical value
q95new = quantile(S2, probs = 0.95)
q95new
#calculate how many trials are greater than the critical value
sum(S2 > q95new)
#calculate the power
power = mean(S2 > q95new)
power
expectedA
pvecA = c(3/8, 1/4, 3/12, 1/8)
observed = rmultinom(1000, prob = pvecA, size = 1000)
dim(observed)
observed[,1:7]
#see the mean for each nucleotide
apply(observed, 1, mean)
#determine expected
expectedA = pvecA * 1000
expectedA
#determine variability
S2 = apply(observed, 2, stat)
#calculate critical value
q95new = quantile(S2, probs = 0.95)
q95new
#calculate how many trials are greater than the critical value
sum(S2 > q95new)
#calculate how many trials are greater than the critical value
sum(S2 > q95new)
#calculate the power
power = mean(S2 > q95new)
power
observed = rmultinom(1000, prob = pvecA, size = 75)
dim(observed)
observed[,1:7]
#see the mean for each nucleotide
apply(observed, 1, mean)
#determine expected
expectedA = pvecA * 75
expectedA
#determine variability
S2 = apply(observed, 2, stat)
#calculate critical value
q95new = quantile(S2, probs = 0.95)
q95new
#calculate how many trials are greater than the critical value
sum(S2 > q95new)
#calculate the power
power = mean(S2 > q95new)
power
observed = rmultinom(1000, prob = pvecA, size = 50)
dim(observed)
observed[,1:7]
#see the mean for each nucleotide
apply(observed, 1, mean)
#determine expected
expectedA = pvecA * 50
expectedA
#determine variability
S2 = apply(observed, 2, stat)
#calculate critical value
q95new = quantile(S2, probs = 0.95)
q95new
q95new
#calculate critical value
q95new = quantile(S2, probs = 0.95)
q95new
#calculate how many trials are greater than the critical value
sum(S2 > q95new)
#calculate the power
power = mean(S2 > q95new)
power
pvecA = c(3/8, 1/4, 3/12, 1/8)
observed = rmultinom(1000, prob = pvecA, size = 20)
dim(observed)
observed[,1:7]
#see the mean for each nucleotide
apply(observed, 1, mean)
#determine expected
expectedA = pvecA * 50
expectedA
#determine expected
expectedA = pvecA * 20
expectedA
#determine variability
S2 = apply(observed, 2, stat)
#calculate critical value
q95new = quantile(S2, probs = 0.95)
q95new
#calculate how many trials are greater than the critical value
sum(S2 > q95new)
#calculate the power
power = mean(S2 > q95new)
power
pvecA = c(3/8, 1/4, 3/12, 1/8)
observed = rmultinom(1000, prob = pvecA, size = 20)
dim(observed)
observed[,1:7]
#see the mean for each nucleotide
apply(observed, 1, mean)
#determine expected
expectedA = pvecA * 20
expectedA
#determine variability
S2 = apply(observed, 2, stat)
#calculate critical value
q95new = quantile(S2, probs = 0.95)
q95new
#calculate how many trials are greater than the critical value
sum(S2 > q95new)
#calculate the power
power = mean(S2 > q95new)
power
pvecA = c(3/8, 1/4, 3/12, 1/8)
observed = rmultinom(1000, prob = pvecA, size = 20)
dim(observed)
observed[,1:7]
#see the mean for each nucleotide
apply(observed, 1, mean)
#determine expected
expectedA = pvecA * 20
expectedA
#determine variability
S2 = apply(observed, 2, stat)
#calculate critical value
q95new = quantile(S2, probs = 0.95)
q95new
#calculate how many trials are greater than the critical value
sum(S2 > q95new)
#calculate the power
power = mean(S2 > q95new)
power
pvecA = c(3/8, 1/4, 3/12, 1/8)
observed = rmultinom(1000, prob = pvecA, size = 20)
dim(observed)
observed[,1:7]
#see the mean for each nucleotide for all 1000 trials
apply(observed, 1, mean)
#determined what the expected values of A G T C in a 20 nucleotide sequence are
expectedA = pvecA * 20
expectedA
#determine variability
S1 = apply(observed, 2, stat)
#compare to the critical value we previously calculated
q95
#calculate how many trials are greater than the critical value
sum(S1 > q95)
#calculate the power
power = mean(S1 > q95)
pvecA = c(3/8, 1/4, 3/12, 1/8)
observed = rmultinom(1000, prob = pvecA, size = 20)
dim(observed)
observed[,1:7]
#see the mean for each nucleotide
apply(observed, 1, mean)
#determine expected
expectedA = pvecA * 20
expectedA
power
#calculate critical value
q95
#calculate how many trials are greater than the critical value
sum(S2 > q95)
#calculate the power
power = mean(S2 > q95)
power
pvecA = c(3/8, 1/4, 3/12, 1/8)
observed = rmultinom(1000, prob = pvecA, size = 100)
dim(observed)
observed[,1:7]
#see the mean for each nucleotide
apply(observed, 1, mean)
#determine expected
expectedA = pvecA * 100
expectedA
#determine variability
S2 = apply(observed, 2, stat)
#calculate critical value
q95
#calculate how many trials are greater than the critical value
sum(S2 > q95)
#calculate the power
power = mean(S2 > q95)
power
observed = rmultinom(1000, prob = pvecA, size = 50)
dim(observed)
observed[,1:7]
#see the mean for each nucleotide
apply(observed, 1, mean)
#determine expected
expectedA = pvecA * 100
expectedA
#determine expected
expectedA = pvecA * 50
expectedA
#determine variability
S2 = apply(observed, 2, stat)
#calculate critical value
q95
#calculate how many trials are greater than the critical value
sum(S2 > q95)
#calculate the power
power = mean(S2 > q95)
power
pvecA = c(3/8, 1/4, 3/12, 1/8)
observed = rmultinom(1000, prob = pvecA, size = 30)
dim(observed)
observed[,1:7]
#see the mean for each nucleotide
apply(observed, 1, mean)
#determine expected
expectedA = pvecA * 30
expectedA
#determine variability
S2 = apply(observed, 2, stat)
#calculate critical value
q95
#calculate how many trials are greater than the critical value
sum(S2 > q95)
#calculate the power
power = mean(S2 > q95)
power
pvecA = c(3/8, 1/4, 3/12, 1/8)
observed = rmultinom(1000, prob = pvecA, size = 28)
dim(observed)
observed[,1:7]
#see the mean for each nucleotide
apply(observed, 1, mean)
#determine expected
expectedA = pvecA * 30
#determine expected
expectedA = pvecA * 28
expectedA
#determine variability
S2 = apply(observed, 2, stat)
#calculate critical value
q95
#calculate how many trials are greater than the critical value
sum(S2 > q95)
#calculate the power
power = mean(S2 > q95)
power
dbinom(10,0.3)
dbinom(2,10,0.3)
rbinom(15, prob = 0.5, size = 1)
dbinom(10, prob = 0.3, size = 2)
dbinom(10, prob = 0.3, size = 2)
dbinom(10, prob = 0.3, size = 2)
dbinom(10, prob = 0.3, size = 1)
rbinom(10, prob = 0.3, size = 1)
rbinom(10, prob = 0.3, size = 2)
rbinom(10, prob = 0.3, size = 1)
rbinom(1, prob = 0.3, size = 10)
rbinom(1, prob = 0.3, size = 10)
vary <- rbinom(1, prob = 0.3, size = 10)
###Exercise 1.3
rpois(10, 0.3)
###Exercise 1.3
rpois(10, 0.3)
###Exercise 1.3
rpois(10, 0.3)
###Exercise 1.3
rpois(10, 0.3)
###Exercise 1.3
rpois(10, 0.3)
pbinom
#load the geonome library thing
library(BSgenome.Celegans.UCSC.ce2)
